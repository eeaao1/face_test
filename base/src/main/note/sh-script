----------------------------------------------jps 用法------------------------------------------------------------------------
参数说明
-q：只输出进程 ID
-m：输出传入 main 方法的参数
-l：输出完全的包名，应用主类名，jar的完全路径名
-v：输出jvm参数
-V：输出通过flag文件传递到JVM中的参数
----------------------------------------------pwdx--------------------------------------------------------------------------------------------------
pwdx [pid]      输出路径
----------------------------------------------lsof -i--------------------------------------------------------------------------------------------------
lsof -i: [port]
---------------------------------------------$jstack---------------------------------------------------------------------------------------------------
2、命令格式
$jstack [ option ] pid
$jstack [ option ] executable core
$jstack [ option ] [server-id@]remote-hostname-or-IP
参数说明:
pid: java应用程序的进程号,一般可以通过jps来获得;
executable:产生core dump的java可执行程序;
core:打印出的core文件;
remote-hostname-or-ip:远程debug服务器的名称或IP;
server-id: 唯一id,假如一台主机上多个远程debug服务;
示例:
$ jstack –l 23561
--------------------------------------------进程对应端口----------------------------------------------------------------------------------------------------
netstat -nap | grep 1095       进程对应端口
netstat -tunlp | grep 8080     端口对应进程
ps -ef|grep cmpbiz
------------------------------------------------------------------------------------------------------------------------------------------
举例来说，macOS 上的 Java 10 共有近千个配置参数：

$ java -XX:+PrintFlagsFinal -XX:+UnlockDiagnosticVMOptions -version | wc -l
java version "10" 2018-03-20
Java(TM) SE Runtime Environment 18.3 (build 10+46)
Java HotSpot(TM) 64-Bit Server VM 18.3 (build 10+46, mixed mode)
     812
     Java 虚拟机将运行时内存区域划分为五个部分，分别为方法区、堆、PC 寄存器、Java 方法栈和本地方法栈。


具体来说，Java 字节码中与调用相关的指令共有五种。

invokestatic：用于调用静态方法。
invokespecial：用于调用私有实例方法、构造器，以及使用 super 关键字调用父类的实例方法或构造器，和所实现接口的默认方法。
invokevirtual：用于调用非私有实例方法。
invokeinterface：用于调用接口方法。
invokedynamic：用于调用动态方法。
----------------------------------------------泛型--------------------------------------------------------------------------------------------
泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法
------------------------------------------------------------------------------------------------------------------------------------------